{"version":3,"sources":["package.json","libs/object.js","libs/array.js","libs/function.js","libs/types.js","libs/url.js","libs/number.js","libs/string.js","libs/date.js","libs/other.js","libs/validator.js","libs/base64.js","libs/files.js","libs/prototype.js","index.js"],"names":["module","exports","name","version","description","main","scripts","test","start","build","repository","type","url","keywords","author","license","deepClone","obj","Array","map","row","Object","ret","keys","forEach","key","Date","getTime","orderBy","arr","props","orders","sort","a","b","reduce","acc","prop","i","p1","p2","findPathByLeafId","leafIdName","leafId","nodes","path","length","tmpPath","push","children","findResult","uniqueBy","filter","element","index","array","findIndex","unique","indexOf","maxNumBy","find","item","Math","max","apply","minNumBy","min","maxNum","minNum","throttleOnce","fn","delay","timer","status","clearTimeout","call","arguments","setTimeout","isNull","value","prototype","toString","isUndefined","isBoolean","isNumber","isString","isSymbol","isObject","isRegExp","isArray","isFunction","getType","match","toLocaleLowerCase","insertUrl","options","replace","$0","$1","val","encodeURIComponent","undefined","Error","URLSearchParams","param","JSON","stringify","join","maps","_params","res","decodeURIComponent","split","parse","err","randomNum","floor","random","round","n","decimals","Number","sum","sumBy","toDecimalMark","num","mark","_num","toLocaleString","padStart","mask","cc","num1","num2","_mask","reg","RegExp","$2","$3","maskLeft","maskRight","strL","randomHexColorCode","getCounts","str","arrStr","_key","formatTime","format","date","o","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","dayNames","getDay","k","getFullYear","substr","_year","formatHMS","s","getRate","rate","slice","graceChecker","error","check","data","rule","checkType","errorMsg","checkRule","minMax","some","checkVal","toStream","base64","decode","console","log","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","_utf8_encode","charCodeAt","isNaN","charAt","String","fromCharCode","_utf8_decode","string","utftext","c","c2","c3","downFiles","match_all","exec","utilscore","types","other","validator","files","packageJSON","global"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["module.exports={name:\"utilscore\",version:\"0.0.26\",description:\"javascript 工具函数包\",main:\"index.js\",scripts:{test:'echo \"Error: no test specified\" && exit 1',start:\"parcel index.js\",build:\"parcel build index.js\"},repository:{type:\"git\",url:\"https://github.com/cgxqd/utilscore\"},keywords:[\"utilscore\",\"core\",\"common\",\"commonJS\",\"common-js\",\"util\",\"utils\",\"lib\",\"libs\",\"javascript\"],author:\"cgx\",license:\"ISC\"};","\r\n/**\r\n * 深度克隆\r\n * @param {*} obj \r\n */\r\nexport const deepClone = (obj) => {\r\n    if(null === obj){\r\n        return obj;\r\n    }\r\n    if(obj instanceof Array){\r\n        return obj.map(row => deepClone(row));\r\n    }\r\n    if(obj instanceof Object){\r\n        let ret = {};\r\n        Object.keys(obj).forEach(key =>{\r\n            if(obj[key] instanceof Date){\r\n                ret[key] = new Date(obj[key].getTime());\r\n            } else {\r\n                ret[key] = deepClone(obj[key]);\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n    return obj;\r\n};\r\n\r\n\r\n/**\r\n * 返回按属性(props)和顺序(orders)排序的对象数组。\r\n * @param {array} arr \r\n * @param {array} props \r\n * @param {array} orders 'desc升序' 、 'asc降序'\r\n * @example const users = [\r\n                { name: 'aaa', age: 48 },\r\n                { name: 'awegawe', age: 36 },\r\n                { name: 'aweaw', age: 40 }\r\n            ]; \r\n            utilscore.orderBy(users, ['age'],['asc']) // => [{\"name\":\"awegawe\",\"age\":36},{\"name\":\"aweaw\",\"age\":40},{\"name\":\"aaa\",\"age\":48}]\r\n */\r\nexport const orderBy = (arr, props, orders) => {\r\n    return [...arr].sort((a, b) =>\r\n    props.reduce((acc, prop, i) => {\r\n      if (acc === 0) {\r\n        const [p1, p2] = orders && orders[i] === 'desc' ? [b[prop], a[prop]] : [a[prop], b[prop]];\r\n        acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;\r\n      }\r\n      return acc;\r\n    }, 0)\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * 根据 key 递归查找链带关系\r\n * @param {sting} leafIdName  \r\n * @param {any} leafId  \r\n * @param {array} nodes 被查找的数组\r\n * @param {array} path 非必填 \r\n * @param {array} path 非必填 \r\n * @example let arr = [\r\n                    {\r\n                        name:'awefawef',\r\n                        id:111,\r\n                        children:[\r\n                            {\r\n                                name:'2222222aaa',\r\n                                id:222,\r\n                                children:[\r\n                                    {\r\n                                        name:'cccccaaa',\r\n                                        id:333,\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                }\r\n            ]\r\n            utilscore.findPathByLeafId('id',333,arr) // => [{\"id\":111,\"value\":\"awefawef\"},{\"id\":222,\"value\":\"2222222aaa\"}]\r\n */\r\nexport const findPathByLeafId = (leafIdName,leafId, nodes, path = []) => {\r\n    for(var i = 0; i < nodes.length; i++) {\r\n        var tmpPath = [...path];\r\n        if(leafId == nodes[i][leafIdName]) {\r\n            return tmpPath;\r\n        }\r\n\r\n        tmpPath.push({\r\n            [leafIdName]:nodes[i][leafIdName],\r\n            value:nodes[i].name\r\n        });\r\n        if(nodes[i].children) {\r\n            let findResult = findPathByLeafId(leafIdName,leafId, nodes[i].children, tmpPath);\r\n            if(findResult) {\r\n                return findResult;\r\n            }\r\n        }\r\n    }\r\n}\r\n  ","/**\r\n * 根据属性去重数组\r\n * @param {array} arr 去重的数组\r\n * @param {string} key 去重的key\r\n * @example utilscore.uniqueBy([{name:'1111'},{name:'1111'},{name:'222'},{name:'333'}],'name') => [{name:'1111'},{name:'222'},{name:'333'}\r\n */\r\nexport const uniqueBy = function(arr,key){\r\n    return arr.filter((element,index,array)=>array.findIndex(row=>row[key]===element[key]) === index)\r\n}\r\n\r\n\r\n/**\r\n * 普通数组去重\r\n * @param {array} arr 去重的数组\r\n * @example utilscore.unique([1,2,2,3,4,3,4,7]) => [1, 2, 3, 4, 7]\r\n */\r\nexport const unique = (arr) =>\r\n    arr.filter((element,index,array)=>array.indexOf(element) === index)\r\n\r\n\r\n/**\r\n * 找出数组中该属性最大值的一列\r\n * @param {array} arr \r\n * @param {string} key  \r\n */    \r\nexport const maxNumBy = (arr,key) => \r\n    arr.find(item => item[key]===Math.max.apply(Math,arr.map(row=>row[key])))\r\n\r\n\r\n/**\r\n * 找出数组中该属性最小值的一列\r\n * @param {array} arr \r\n * @param {string} key  \r\n */    \r\nexport const minNumBy = (arr,key) => \r\n    arr.find(item => item[key]===Math.min.apply(Math,arr.map(row=>row[key])))   \r\n\r\n\r\n/**\r\n * 数组中的最大值\r\n * @param {array} arr \r\n */    \r\nexport const maxNum = (arr) => \r\n    Math.max.apply(Math,arr)\r\n\r\n\r\n/**\r\n * 数组中的最小值\r\n * @param {array} arr \r\n */    \r\nexport const minNum = (arr) => \r\n    Math.min.apply(Math,arr)\r\n","/**\r\n * 函数节流(首次执行)\r\n * @param {*} fn \r\n * @param {*} delay \r\n * @param {*} type \r\n */\r\nexport const  throttleOnce = function (fn,delay=3000){\r\n\r\n\tlet timer = null;\r\n\tlet status = true;\r\n\tclearTimeout(timer);\r\n\tif(status){\r\n\t\tstatus = false;\r\n\t\tfn.call(this,arguments);\r\n\t}\r\n\ttimer = setTimeout(()=>status = true, delay);\r\n}\r\n\r\n","\r\n/**\r\n * 判断类型Null\r\n * @param {any} value \r\n */\r\nexport const isNull = value => Object.prototype.toString.call(value) == \"[object Null]\"\r\n\r\n/**\r\n * 判断类型Undefined \r\n * @param {any} value \r\n */\r\nexport const isUndefined = value => Object.prototype.toString.call(value) == \"[object Undefined]\"\r\n\r\n/**\r\n * 判断类型Boolean\r\n * @param {any} value \r\n */\r\nexport const isBoolean = value => Object.prototype.toString.call(value) == \"[object Boolean]\"\r\n\r\n/**\r\n * 判断类型Number\r\n * @param {any} value \r\n */\r\nexport const isNumber = value => Object.prototype.toString.call(value) == \"[object Number]\"\r\n\r\n/**\r\n * 判断类型String\r\n * @param {any} value \r\n */\r\nexport const isString = value => Object.prototype.toString.call(value) == \"[object String]\"\r\n\r\n/**\r\n * 判断类型Symbol\r\n * @param {any} value \r\n */\r\nexport const isSymbol = value => Object.prototype.toString.call(value) == \"[object Symbol]\"\r\n\r\n/**\r\n * 判断类型Object\r\n * @param {any} value \r\n */\r\nexport const isObject = value => Object.prototype.toString.call(value) == \"[object Object]\"\r\n\r\n/**\r\n * 判断类型RegExp\r\n * @param {any} value \r\n */\r\nexport const isRegExp = value=> Object.prototype.toString.call(value) == \"[object RegExp]\"\r\n\r\n/**\r\n * 判断类型Array\r\n * @param {any} value \r\n */\r\nexport const isArray = value => Object.prototype.toString.call(value) == \"[object Array]\"\r\n\r\n/**\r\n * 判断类型Function\r\n * @param {any} value \r\n */\r\nexport const isFunction = value => Object.prototype.toString.call(value) == \"[object Function]\"\r\n\r\nexport const getType = (value) => Object.prototype.toString.call(value).match(/\\s([a-z]+)/i)[1].toLocaleLowerCase()","import { isObject, isString } from './types'\r\n/**\r\n * 根据对象中的参数匹配插入到url中\r\n * @param {*} url \r\n * @param {Object} options \r\n * @example utilscore.insertUrl('http://www.baidu.com?:name',{name:'ceshi'}) // => http://www.baidu.com?ceshi\r\n */\r\nexport const insertUrl = (url, options = {}) => {\r\n    return url.replace(/:([a-zA-Z0-9_]{1,})/g, ($0, $1) => {\r\n        let val = encodeURIComponent(options[$1]);\r\n        if (val === undefined) {\r\n            new Error(`URL ${url} not find ${$1}`);\r\n        }\r\n        return val;\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * url 序列化和反序列化\r\n * @param {Object||String} param \r\n * @example utilscore.URLSearchParams('https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=parseQueryString&rsv_pq=8c7a6d0000146171&rsv_t=43d6RzTiyjUjUKtQtqfR3XL25JepKFwJYvvSpsj%2BJ7aFqxdBLDungY%2Bfx%2BE&rqlang=cn&rsv_enter=1&rsv_n=2&rsv_sug3=1') \r\n            // => \r\n            {\r\n                \"ie\":\"utf-8\",\r\n                \"f\":\"8\",\r\n                \"rsv_bp\":\"1\",\r\n                \"rsv_idx\":\"1\",\r\n                \"tn\":\"baidu\",\r\n                \"wd\":\"parseQueryString\",\r\n                \"rsv_pq\":\"8c7a6d0000146171\",\r\n                \"rsv_t\":\"43d6RzTiyjUjUKtQtqfR3XL25JepKFwJYvvSpsj+J7aFqxdBLDungY+fx+E\",\r\n                \"rqlang\":\"cn\",\r\n                \"rsv_enter\":\"1\",\r\n                \"rsv_n\":\"2\",\r\n                \"rsv_sug3\":\"1\"\r\n            }\r\n            utilscore.URLSearchParams({\r\n                name:'cgx',\r\n                test:'ceshi'\r\n            })\r\n            // => \"name=cgx&test=ceshi\"\r\n */\r\n\r\nexport const URLSearchParams = (param) => {\r\n    if (isObject(param)) {\r\n        return Object.keys(param).map(key => `${key}=${encodeURIComponent(JSON.stringify(param[key]))}`).join('&')\r\n    } else if (isString(param)) {\r\n        let maps = {};\r\n\t\tlet _params = param.match(/([\\w\\%\\d]+\\=[\\w\\%\\d]+)/g)\r\n        _params && _params.match(/([\\w\\%\\d]+\\=[\\w\\%\\d]+)/g).forEach(res=>{\r\n            let row = decodeURIComponent(res).split('=');\r\n            try{\r\n                maps[row[0] + ''] = JSON.parse(decodeURIComponent(row[1]))\r\n            }catch(err){\r\n                maps[row[0] + ''] = decodeURIComponent(row[1])\r\n            }\r\n        })\r\n        return maps\r\n    }\r\n}","/**\r\n * 返回指定范围内的随机整数。\r\n * @param {number} min 最小值\r\n * @param {number} max 最大值\r\n */\r\nexport const randomNum = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n/**\r\n * 将数字四舍五入到指定的小数位数。\r\n * @param {number} n 操作的数字\r\n * @param {number} decimals 精确到几位小数 \r\n */\r\nexport const round = (n, decimals = 0) => {\r\n    return Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`)\r\n}\r\n\r\n\r\n/**\r\n * 返回两个或两个以上数字/数字数组中元素之和。\r\n * @param  {...any} arr 操作的数组 \r\n */\r\nexport const sum = (...arr) => [...arr].reduce((acc, val) => acc + val, 0);\r\n\r\n\r\n/**\r\n * 根据函数映射每个元素，然后返回数组的和\r\n * @param {*} arr \r\n * @param {*} fn \r\n */\r\nexport const sumBy = (arr, fn) =>\r\n  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val) => acc + val, 0);\r\n\r\n/**\r\n * 将数字转化为千分位格式,可以在数字前面加上符号\r\n * @param {number|string} num \r\n * @param {string} mark\r\n * @returns {string}\r\n */\r\nexport const toDecimalMark = (num,mark='') => {\r\n  let _num = num.toLocaleString('en-US');\r\n  if(mark) return _num.padStart(_num.length+1,mark)\r\n  return _num;\r\n}","import { unique } from './array'\r\nimport { isArray, isString } from './types' \r\n\r\n/**\r\n * 根据位置,使用 * 遮蔽字符串\r\n * @param {string} cc \r\n * @param {number} num1 \r\n * @param {number} num2 \r\n * @param {string} _mask \r\n * @example utilscore.mask('12398765432',3,7) // => \"123****5432\"\r\n */ \r\nexport const mask = (cc, num1 = 0, num2 = 0, _mask = '*') => {\r\n  let reg = new RegExp(`\\^\\(\\.\\{${num1}\\}\\)\\(\\.\\{${num2 - num1}\\}\\)\\(\\.${num2>=cc.length?'\\?':'\\+'}\\)\\$`);\r\n  return cc.replace(reg,($0,$1,$2,$3)=> $1+$2.replace(/./g,_mask)+$3) \r\n}\r\n\r\n/**\r\n * 从位置左边开始，使用 * 遮蔽字符串\r\n * @param {string} cc \r\n * @param {number} num \r\n * @param {string} _mask \r\n */\r\nexport const maskLeft = (cc, num = 0, _mask = '*') => mask(cc,0,num,_mask)\r\n  \r\n/**\r\n * 从位置右边开始，使用 * 遮蔽字符串\r\n * @param {string} cc \r\n * @param {number} num \r\n * @param {string} _mask \r\n */\r\nexport const maskRight = (cc, num = 0, _mask = '*') => {\r\n  let strL = cc.length\r\n  return mask(cc,num>strL?0:strL-num,strL,_mask)\r\n}\r\n\r\n\r\n/**\r\n * 生成一个随机的十六进制颜色代码\r\n */\r\nexport const randomHexColorCode = () => {\r\n    let n = ((Math.random() * 0xfffff) | 0).toString(16);\r\n    return '#' + (n.length !== 6 ? ((Math.random() * 0xf) | 0).toString(16) + n : n)\r\n  }\r\n\r\n\r\n/**\r\n * 返回元素出现的次数\r\n * @param {string} str \r\n * @param {null|string,array} keys \r\n * @example 1.不传参,获取全部\r\n              utilscore.getCounts('asawdawf') // => {a: 3, s: 1, w: 2, d: 1, f: 1}\r\n            2.传字符串  \r\n              utilscore.getCounts('asasfdfasdasf','asf') // => {asf: 2}\r\n            3.传数组\r\n              utilscore.getCounts('asdfjl;qwoetuqwe*(^&&()_)*_23480*yoij)(ojilA4WE4',['we*(^&&()_)*','asdfjl','_23480','qw'])\r\n              // => {we*(^&&()_)*: 1, asdfjl: 1, _23480: 1, qw: 2}\r\n */\r\nexport const getCounts = (str,keys=null) => {\r\n  let arr = {}\r\n  let keyMap = []\r\n  let arrStr = str.split('')\r\n  \r\n  if(isArray(keys)) keyMap = unique(keys);\r\n  else if(isString(keys)) keyMap = keys.split(' ')\r\n  else keyMap = unique(arrStr)\r\n\r\n  keyMap.map(key=>{\r\n    \r\n    //处理包含特殊字符\r\n    var reg = new RegExp(\"\\([`~!@#$^&*()=|{}':;',\\\\[\\\\].<>/?~！@#￥……&*（）——|{}【】‘；：”“'。，、？]\\)\",'g')\r\n    let _key = key.replace(reg,'\\\\$1')\r\n\r\n    let res = str.match(new RegExp(_key,'g'))\r\n    \r\n    arr[key] = res?(arr[key] = res.length):0\r\n  })\r\n\r\n\r\n\treturn arr\r\n} \r\n","/**\r\n * 格式化时间\r\n * @param {*} obj \r\n * @param {*} format \r\n * @example utilscore.formatTime(new Date(),'yyyy-M-d h:m:s D') // => 2019-05-10 17:37:24 星期六\r\n */\r\nexport const formatTime = (obj, format) => {\r\n    if (format) {\r\n      var date;\r\n      if (obj instanceof Date) {\r\n        date = obj;\r\n      } else {\r\n        date = new Date(obj);\r\n      }\r\n      var dayNames = ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日',]\r\n\r\n      var o = {\r\n        'M+': date.getMonth() < 9 ? \"0\" + (date.getMonth() + 1) : (date.getMonth() + 1), // 月份\r\n        'd+': date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate(), // 日\r\n        'h+': date.getHours(), // 小时\r\n        'm+': date.getMinutes(), // 分\r\n        's+': date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds(), // 秒\r\n        'q+': Math.floor((date.getMonth() + 3) / 3), // 季度\r\n        'S+': date.getMilliseconds(), // 毫秒\r\n        'D+': dayNames[date.getDay()], //星期\r\n      };\r\n\r\n      if (/(y+)/.test(format)) format = format.replace(RegExp.$1, (`${date.getFullYear()}`).substr(4 - RegExp.$1.length));\r\n      for (var k in o) {\r\n        if (new RegExp(`(${k})`).test(format)) {\r\n          format = format.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((`\r\n00${o[k]}`).substr((`${o[k]}`).length)));\r\n        }\r\n      }\r\n      return format;\r\n    } else {\r\n      let date = new Date(obj)\r\n      let _year = date.getFullYear(),\r\n        _month = (date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : '0' + (date.getMonth() + 1),\r\n        _date = date.getDate(),\r\n        _hour = date.getHours(),\r\n        _minute = date.getMinutes(),\r\n        _second = date.getSeconds()\r\n      return _year + '-' + _month + '-' + _date + ' ' + _hour + ':' + _minute + ':' + _second\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @param  {s} 秒数\r\n   * @return {String} 字符串\r\n   * @example utilscore.formatHMS(3610) // -> 1h0m10s\r\n   */\r\n  export const formatHMS = (s) => {\r\n    var str = ''\r\n    if (s > 3600) {\r\n      str = Math.floor(s / 3600) + 'h' + Math.floor(s % 3600 / 60) + 'm' + s % 60 + 's'\r\n    } else if (s > 60) {\r\n      str = Math.floor(s / 60) + 'm' + s % 60 + 's'\r\n    } else {\r\n      str = s % 60 + 's'\r\n    }\r\n    return str\r\n  }","/**\r\n * 评分组件\r\n * @param {Number} rate max 5\r\n * @example utilscore.getRate(2)   //★★☆☆☆\r\n */\r\nexport const getRate =  (rate) => {\r\n    return '★★★★★☆☆☆☆☆'.slice(5 - rate, 10 - rate);\r\n}","/**\r\n *  表单验证\r\n *  //定义表单规则\r\n    var rule = [\r\n        {name:\"nickname\", checkType : \"string\", checkRule:\"1,3\",  errorMsg:\"姓名应为1-3个字符\"},\r\n        {name:\"gender\", checkType : \"in\", checkRule:['男','女'],  errorMsg:\"请选择性别\"},\r\n        {name:\"loves\", checkType : \"notnull\", checkRule:\"\",  errorMsg:\"请选择爱好\"}\r\n    ];\r\n    var checkRes = graceChecker.check({\r\n        nickname:'斯蒂芬',\r\n        gender:'男',\r\n        loves:'打代码'\r\n    }, rule);\r\n    if(checkRes){\r\n        console.log('验证通过')\r\n    }\r\n */\r\nexport const graceChecker = {\r\n\terror:'',\r\n\tcheck : function (data, rule){\r\n\t\tfor(var i = 0; i < rule.length; i++){\r\n\t\t\tif (!rule[i].checkType){return true;}\r\n\t\t\tif (!rule[i].name) {return true;}\r\n\t\t\tif (!rule[i].errorMsg) {return true;}\r\n\t\t\tif (!data[rule[i].name]) {this.error = rule[i].errorMsg; return false;}\r\n\t\t\tswitch (rule[i].checkType){\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tvar reg = new RegExp('^.{' + rule[i].checkRule + '}$');\r\n\t\t\t\t\tif(!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg; return false;}\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'int':\r\n\t\t\t\t\tvar reg = new RegExp('^(-[1-9]|[1-9])[0-9]{' + rule[i].checkRule + '}$');\r\n\t\t\t\t\tif(!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg; return false;}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'between':\r\n\t\t\t\t\tif (!this.isNumber(data[rule[i].name])){\r\n\t\t\t\t\t\tthis.error = rule[i].errorMsg;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar minMax = rule[i].checkRule.split(',');\r\n\t\t\t\t\tminMax[0] = Number(minMax[0]);\r\n\t\t\t\t\tminMax[1] = Number(minMax[1]);\r\n\t\t\t\t\tif (data[rule[i].name] > minMax[1] || data[rule[i].name] < minMax[0]) {\r\n\t\t\t\t\t\tthis.error = rule[i].errorMsg;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'betweenD':\r\n\t\t\t\t\tvar reg = /^-?[1-9][0-9]?$/;\r\n\t\t\t\t\tif (!reg.test(data[rule[i].name])) { this.error = rule[i].errorMsg; return false; }\r\n\t\t\t\t\tvar minMax = rule[i].checkRule.split(',');\r\n\t\t\t\t\tminMax[0] = Number(minMax[0]);\r\n\t\t\t\t\tminMax[1] = Number(minMax[1]);\r\n\t\t\t\t\tif (data[rule[i].name] > minMax[1] || data[rule[i].name] < minMax[0]) {\r\n\t\t\t\t\t\tthis.error = rule[i].errorMsg;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'betweenF': \r\n\t\t\t\t\tvar reg = /^-?[0-9][0-9]?.+[0-9]+$/;\r\n\t\t\t\t\tif (!reg.test(data[rule[i].name])){this.error = rule[i].errorMsg; return false;}\r\n\t\t\t\t\tvar minMax = rule[i].checkRule.split(',');\r\n\t\t\t\t\tminMax[0] = Number(minMax[0]);\r\n\t\t\t\t\tminMax[1] = Number(minMax[1]);\r\n\t\t\t\t\tif (data[rule[i].name] > minMax[1] || data[rule[i].name] < minMax[0]) {\r\n\t\t\t\t\t\tthis.error = rule[i].errorMsg;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'same':\r\n\t\t\t\t\tif (data[rule[i].name] != rule[i].checkRule) { this.error = rule[i].errorMsg; return false;}\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'notsame':\r\n\t\t\t\t\tif (data[rule[i].name] == rule[i].checkRule) { this.error = rule[i].errorMsg; return false; }\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'email':\r\n\t\t\t\t\tvar reg = /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\r\n\t\t\t\t\tif (!reg.test(data[rule[i].name])) { this.error = rule[i].errorMsg; return false; }\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'phoneno':\r\n\t\t\t\t\tvar reg = /^1[0-9]{10,10}$/;\r\n\t\t\t\t\tif (!reg.test(data[rule[i].name])) { this.error = rule[i].errorMsg; return false; }\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'zipcode':\r\n\t\t\t\t\tvar reg = /^[0-9]{6}$/;\r\n\t\t\t\t\tif (!reg.test(data[rule[i].name])) { this.error = rule[i].errorMsg; return false; }\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'reg':\r\n\t\t\t\t\tvar reg = new RegExp(rule[i].checkRule);\r\n\t\t\t\t\tif (!reg.test(data[rule[i].name])) { this.error = rule[i].errorMsg; return false; }\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'in':\r\n\t\t\t\t\tif(!rule[i].checkRule.some(row=>row===data[rule[i].name])){\r\n\t\t\t\t\t\tthis.error = rule[i].errorMsg; return false;\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'notnull':\r\n\t\t\t\t\tif(data[rule[i].name] == null || data[rule[i].name].length < 1){this.error = rule[i].errorMsg; return false;}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\tisNumber : function (checkVal){\r\n\t\tvar reg = /^-?[1-9][0-9]?.?[0-9]*$/;\r\n\t\treturn reg.test(checkVal);\r\n\t}\r\n}","let toStream = (base64) => {\r\n    // let start = base64.indexOf(',');\r\n    // console.log(base64);\r\n    // console.log(start)\r\n    // base64 = base64.substr(start+1);\r\n    base64 = base64.replace(\" \", \"+\");\r\n    console.log(`base64:${base64.length}`);\r\n    return decode(base64);\r\n};\r\n\r\n// private property\r\nconst _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n\r\n\r\n/**\r\n * base64 加密 \r\n * @param {string} input \r\n */\r\nexport const encode = (input='') => {\r\n    let output = \"\";\r\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n    let i = 0;\r\n    input = _utf8_encode(input);\r\n    while (i < input.length) {\r\n        chr1 = input.charCodeAt(i++);\r\n        chr2 = input.charCodeAt(i++);\r\n        chr3 = input.charCodeAt(i++);\r\n        enc1 = chr1 >> 2;\r\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n        enc4 = chr3 & 63;\r\n        if (isNaN(chr2)) {\r\n            enc3 = enc4 = 64;\r\n        } else if (isNaN(chr3)) {\r\n            enc4 = 64;\r\n        }\r\n        output = output +\r\n            _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +\r\n            _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\r\n    }\r\n    return output;\r\n};\r\n\r\n/**\r\n * base64 解密\r\n * @param {string} input \r\n */\r\nexport const decode = (input='') => {\r\n    let output = \"\";\r\n    let chr1, chr2, chr3;\r\n    let enc1, enc2, enc3, enc4;\r\n    let i = 0;\r\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n    while (i < input.length) {\r\n        enc1 = _keyStr.indexOf(input.charAt(i++));\r\n        enc2 = _keyStr.indexOf(input.charAt(i++));\r\n        enc3 = _keyStr.indexOf(input.charAt(i++));\r\n        enc4 = _keyStr.indexOf(input.charAt(i++));\r\n        chr1 = (enc1 << 2) | (enc2 >> 4);\r\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n        chr3 = ((enc3 & 3) << 6) | enc4;\r\n        output = output + String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output = output + String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output = output + String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    output = _utf8_decode(output);\r\n    return output;\r\n};\r\n\r\n// private method for UTF-8 encoding\r\nfunction _utf8_encode(string) {\r\n    string = string.replace(/\\r\\n/g,\"\\n\");\r\n    let utftext = \"\";\r\n    for (let n = 0; n < string.length; n++) {\r\n        let c = string.charCodeAt(n);\r\n        if (c < 128) {\r\n            utftext += String.fromCharCode(c);\r\n        } else if((c > 127) && (c < 2048)) {\r\n            utftext += String.fromCharCode((c >> 6) | 192);\r\n            utftext += String.fromCharCode((c & 63) | 128);\r\n        } else {\r\n            utftext += String.fromCharCode((c >> 12) | 224);\r\n            utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n            utftext += String.fromCharCode((c & 63) | 128);\r\n        }\r\n\r\n    }\r\n    return utftext;\r\n}\r\n\r\n// private method for UTF-8 decoding\r\nfunction _utf8_decode(utftext) {\r\n    let string = \"\";\r\n    let i = 0;\r\n    let c = 0;\r\n    let c1 = 0;\r\n    let c2 = 0;\r\n    let c3 = 0;\r\n    while ( i < utftext.length ) {\r\n        c = utftext.charCodeAt(i);\r\n        if (c < 128) {\r\n            string += String.fromCharCode(c);\r\n            i++;\r\n        } else if((c > 191) && (c < 224)) {\r\n            c2 = utftext.charCodeAt(i+1);\r\n            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n            i += 2;\r\n        } else {\r\n            c2 = utftext.charCodeAt(i+1);\r\n            c3 = utftext.charCodeAt(i+2);\r\n            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n            i += 3;\r\n        }\r\n    }\r\n    return string;\r\n}","/**\r\n * 文件下载\r\n * @param {String} options.url 请求路径\r\n * @param {String} options.fileName 文件名\r\n */\r\nexport const downFiles = (options = {\r\n    url:'',\r\n    fileName:'',\r\n}) => {\r\n    console.log('文件下载')\r\n}","String.prototype.match_all = function(reg){\r\n\tvar arr = []\r\n\tvar str = this;\r\n\tvar s = '';\r\n\twhile ((s = reg.exec(str)) != null) {\r\n\t\tarr.push(s[1])\r\n\t} \r\n\treturn arr\r\n}\t\r\n","\r\nimport packageJSON from './package.json'\r\nimport * as obj from './libs/object' \r\nimport * as arr from './libs/array' \r\nimport * as fn from './libs/function' \r\nimport * as url from './libs/url' \r\nimport * as types from './libs/types' \r\nimport * as num from './libs/number' \r\nimport * as str from './libs/string' \r\nimport * as date from './libs/date'\r\nimport * as other from './libs/other'\r\nimport * as validator from './libs/validator'\r\nimport * as base64 from './libs/base64'\r\nimport * as files from './libs/files'\r\nimport './libs/prototype'\r\n\r\nconst utilscore = {\r\n    ...obj,\r\n    ...arr,\r\n    ...date,\r\n    ...fn,\r\n    ...str,\r\n    ...num,\r\n    ...types,\r\n    ...url,\r\n    ...other,\r\n    ...validator,\r\n    ...base64,\r\n    ...files,\r\n    version:packageJSON.version,\r\n}\r\n\r\nglobal.utilscore = utilscore\r\n\r\nfor(let key in utilscore){\r\n\texports[key] = utilscore[key]\r\n}\r\n\r\n\r\n"]}