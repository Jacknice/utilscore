{"version":3,"sources":["libs/object.js","libs/array.js","libs/function.js","libs/url.js","libs/types.js","libs/number.js","libs/string.js","libs/prototype.js","index.js"],"names":["deepClone","obj","Array","map","row","Object","ret","keys","forEach","key","Date","getTime","orderBy","arr","props","orders","sort","a","b","reduce","acc","prop","i","p1","p2","unique","filter","element","index","array","findIndex","unique2","indexOf","throttle","fn","delay","timer","status","clearTimeout","call","arguments","setTimeout","Url","url","options","replace","$0","$1","val","encodeURIComponent","undefined","Error","$isNull","value","prototype","toString","$isUndefined","$isBoolean","$isNumber","$isString","$isSymbol","$isObject","$isRegExp","$isArray","$isFunction","randomIntegerInRange","min","max","Math","floor","random","round","n","decimals","Number","sum","sumBy","toDecimalMark","num","toLocaleString","mask","cc","slice","randomHexColorCode","length","String","match_all","reg","s","exec","push","utils","types","str","window","_utils"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["\r\n/**\r\n * 深度克隆\r\n * @param {*} obj \r\n */\r\nexport const deepClone = (obj) => {\r\n    if(null === obj){\r\n        return obj;\r\n    }\r\n    if(obj instanceof Array){\r\n        return obj.map(row => deepClone(row));\r\n    }\r\n    if(obj instanceof Object){\r\n        let ret = {};\r\n        Object.keys(obj).forEach(key =>{\r\n            if(obj[key] instanceof Date){\r\n                ret[key] = new Date(obj[key].getTime());\r\n            } else {\r\n                ret[key] = deepClone(obj[key]);\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n    return obj;\r\n};\r\n\r\n\r\n/**\r\n * 返回按属性(props)和顺序(orders)排序的对象数组。\r\n * @param {*} arr \r\n * @param {*} props \r\n * @param {*} orders \r\n */\r\nexport const orderBy = (arr, props, orders) => {\r\n    return [...arr].sort((a, b) =>\r\n    props.reduce((acc, prop, i) => {\r\n      if (acc === 0) {\r\n        const [p1, p2] = orders && orders[i] === 'desc' ? [b[prop], a[prop]] : [a[prop], b[prop]];\r\n        acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;\r\n      }\r\n      return acc;\r\n    }, 0)\r\n  );\r\n}\r\n  ","/**\r\n * 根据属性去重数组\r\n * @param {array} arr 去重的数组\r\n * @param {string} key 去重的key\r\n * @example unique([{name:'1111'},{name:'1111'},{name:'222'},{name:'333'}],'name') => [{name:'1111'},{name:'222'},{name:'333'}\r\n */\r\nexport const unique = function(arr,key){\r\n    return arr.filter((element,index,array)=>array.findIndex(row=>row[key]===element[key]) === index)\r\n}\r\n\r\n\r\n/**\r\n * 普通数组去重\r\n * @param {array} arr 去重的数组\r\n * @example unique2([1,2,2,3,4,3,4,7]) => [1, 2, 3, 4, 7]\r\n */\r\nexport const unique2 = (arr) =>\r\n    arr.filter((element,index,array)=>array.indexOf(element) === index)","/**\r\n * 函数节流(首次执行)\r\n * @param {*} fn \r\n * @param {*} delay \r\n * @param {*} type \r\n */\r\nexport const  throttle = function (fn,delay=3000){\r\n\r\n\tlet timer = null;\r\n\tlet status = true;\r\n\tclearTimeout(timer);\r\n\tif(status){\r\n\t\tstatus = false;\r\n\t\tfn.call(this,arguments);\r\n\t}\r\n\ttimer = setTimeout(()=>status = true, delay);\r\n}\r\n\r\n","/**\r\n * 请求参数\r\n * @param {*} url \r\n * @param {*} options \r\n */\r\nexport const Url = (url, options={})=>{\r\n\treturn url.replace(/:([a-zA-Z0-9_]{1,})/g,($0,$1)=>{\r\n\t\tlet val = encodeURIComponent(options[$1]);\r\n\t\tif(val === undefined){\r\n\t\t\tnew Error(`URL ${url} not find ${$1}`);\r\n\t\t}\r\n\t\treturn  val;\r\n\t})\r\n}\r\n\t","\r\n/**\r\n * 判断类型Null\r\n * @param {any} value \r\n */\r\nexport const $isNull = value => Object.prototype.toString.call(value) == \"[object Null]\"\r\n\r\n/**\r\n * 判断类型Undefined \r\n * @param {any} value \r\n */\r\nexport const $isUndefined = value => Object.prototype.toString.call(value) == \"[object Undefined]\"\r\n\r\n/**\r\n * 判断类型Boolean\r\n * @param {any} value \r\n */\r\nexport const $isBoolean = value => Object.prototype.toString.call(value) == \"[object Boolean]\"\r\n\r\n/**\r\n * 判断类型Number\r\n * @param {any} value \r\n */\r\nexport const $isNumber = value => Object.prototype.toString.call(value) == \"[object Number]\"\r\n\r\n/**\r\n * 判断类型String\r\n * @param {any} value \r\n */\r\nexport const $isString = value => Object.prototype.toString.call(value) == \"[object String]\"\r\n\r\n/**\r\n * 判断类型Symbol\r\n * @param {any} value \r\n */\r\nexport const $isSymbol = value => Object.prototype.toString.call(value) == \"[object Symbol]\"\r\n\r\n/**\r\n * 判断类型Object\r\n * @param {any} value \r\n */\r\nexport const $isObject = value => Object.prototype.toString.call(value) == \"[object Object]\"\r\n\r\n/**\r\n * 判断类型RegExp\r\n * @param {any} value \r\n */\r\nexport const $isRegExp = value=> Object.prototype.toString.call(value) == \"[object RegExp]\"\r\n\r\n/**\r\n * 判断类型Array\r\n * @param {any} value \r\n */\r\nexport const $isArray = value => Object.prototype.toString.call(value) == \"[object Array]\"\r\n\r\n/**\r\n * 判断类型Function\r\n * @param {any} value \r\n */\r\nexport const $isFunction = value => Object.prototype.toString.call(value) == \"[object Function]\"","/**\r\n * 返回指定范围内的随机整数。\r\n * @param {number} min 最小值\r\n * @param {number} max 最大值\r\n */\r\nexport const randomIntegerInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n/**\r\n * 将数字四舍五入到指定的小数位数。\r\n * @param {number} n 操作的数字\r\n * @param {number} decimals 精确到几位小数 \r\n */\r\nexport const round = (n, decimals = 0) => {\r\n    return Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`)\r\n}\r\n\r\n\r\n/**\r\n * 返回两个或两个以上数字/数字数组中元素之和。\r\n * @param  {...any} arr 操作的数组 \r\n */\r\nexport const sum = (...arr) => [...arr].reduce((acc, val) => acc + val, 0);\r\n\r\n\r\n/**\r\n * 根据函数映射每个元素，然后返回数组的和\r\n * @param {*} arr \r\n * @param {*} fn \r\n */\r\nexport const sumBy = (arr, fn) =>\r\n  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val) => acc + val, 0);\r\n\r\n/**\r\n * 将数字转化为千分位格式\r\n * @param {*} num \r\n */\r\nexport const toDecimalMark = num => num.toLocaleString('en-US');","/**\r\n * 使用 * 遮蔽字符串\r\n * @param {*} cc \r\n * @param {*} num \r\n * @param {*} mask \r\n */\r\nexport const mask = (cc, num = 4, mask = '*') =>('' + cc).slice(0, -num).replace(/./g, mask) + ('' + cc).slice(-num);\r\n\r\n/**\r\n * 生成一个随机的十六进制颜色代码。\r\n */\r\nexport const randomHexColorCode = () => {\r\n    let n = ((Math.random() * 0xfffff) | 0).toString(16);\r\n    return '#' + (n.length !== 6 ? ((Math.random() * 0xf) | 0).toString(16) + n : n);\r\n  };","String.prototype.match_all = function(reg){\r\n\tvar arr = []\r\n\tvar str = this;\r\n\tvar s = '';\r\n\twhile ((s = reg.exec(str)) != null) {\r\n\t\tarr.push(s[1])\r\n\t} \r\n\treturn arr\r\n}\t\r\n","\r\nimport * as obj from './libs/object' \r\nimport * as arr from './libs/array' \r\nimport * as fn from './libs/function' \r\nimport * as url from './libs/url' \r\nimport * as types from './libs/types' \r\nimport * as num from './libs/number' \r\nimport * as str from './libs/string' \r\n\r\nimport './libs/prototype'\r\n\r\nconst utils = {\r\n    ...obj,\r\n    ...arr,\r\n    ...fn,\r\n    ...url,\r\n    ...types, \r\n    ...num,\r\n    ...str\r\n}\r\n\r\nwindow._utils = utils\r\n\r\nexport default utils\r\n"]}